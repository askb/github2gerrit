---
# SPDX-License-Identifier: Apache-2.0
# Copyright 2024 The Linux Foundation <abelur@linux.com>

name: github2gerrit-composite-action
description: "Submit a Githib pull-request to Gerrit repository"

inputs:
  FETCH_DEPTH:
    description: "fetch-depth for the clone."
    required: true
    type: string
  GERRIT_KNOWN_HOSTS:
    description: "known hosts"
    required: true
    type: string
  GERRIT_SERVER:
    description: "Gerrit hostname ex: git.opendaylight.org"
    required: false
    type: string
  GERRIT_SERVER_PORT:
    description: "Gerrit port. (Default: 29418)"
    required: false
    type: string
  GERRIT_PROJECT:
    description: "Gerrit project name. ex: releng/builder"
    required: false
    type: string
  GERRIT_SSH_PRIVKEY_G2G:
    description: "SSH Private key"
    required: true
    type: string
  GERRIT_SSH_USER_G2G:
    description: "Gerrit user-id for SSH"
    required: true
    type: string
  GERRIT_SSH_USER_G2G_EMAIL:
    description: "Email of the SSH user"
    required: true
    type: string
  ORGANIZATION:
    description: "Orginazation name ex: OpendayLight.org"
    required: true
    type: string
  REVIEWERS_EMAIL:
    description: "Committers email list (comma separated) to notify on code-reviews"
    required: false
    default: ""
    type: string

outputs:
  url:
    description: "URL of the change-request submitted"
    value: ${{ steps.change_num.outputs.GERRIT_CHANGE_REQUEST_URL }}
  change_number:
    description: "Change number"
    value: ${{ steps.change_num.outputs.GERRIT_CHANGE_REQUEST_NUMBER }}

runs:
  using: "composite"
  steps:
    - name: Install python
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: "3.11"

    - name: "Install required dependencies: git-review,jq"
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install "git-review==2.3.1" jq
        git review --version
        jq --version

    - name: Clone Github repo where the PR is submitted
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.FETCH_DEPTH }}
        ref: ${{ github.event.pull_request.head.sha }}

    - name: "Read inputs to set PROJECT_REPO_{GERRIT,GITHUB} if .gitreview is undefined"
      if: ${{ hashFiles('.gitreview') == '' }}
      shell: bash
      run: |
        set -x

        project_repo_github="${{ github.repository }}"
        if [[ ${{ inputs.GERRIT_PROJECT }} != "$project_repo_github" ]]; then
            # remove repo owner name
            project_repo_github="${project_repo_github#*/}"
            # change any '-' to '/' and
            project_repo_gerrit="${project_repo_github//-//}"
            echo "PROJECT_REPO_GITHUB=${project_repo_github}" >> "$GITHUB_ENV"
            echo "PROJECT_REPO_GERRIT=${project_repo_gerrit}" >> "$GITHUB_ENV"
        fi

    - name: Read .gitreview to set PROJECT_REPO_GERRIT & PROJECT_REPO_GITHUB
      if: ${{ hashFiles('.gitreview') != '' }}
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x

        project_repo_gerrit_git=$(grep -E "project" .gitreview | cut -d "=" -f2)
        # strip .git suffix
        project_repo_gerrit="${project_repo_gerrit_git//.*}"
        # change any '/' to '-' nested repos are not available on Github
        project_repo_github="${project_repo_gerrit////-}"

        echo "PROJECT_REPO_GERRIT=${project_repo_gerrit}" >> "$GITHUB_ENV"
        echo "PROJECT_REPO_GITHUB=${project_repo_github}" >> "$GITHUB_ENV"

    - name: Read .gitreview and set env GERRIT_SERVER and GERRIT_PORT
      if: ${{ hashFiles('.gitreview') != '' }}
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x

        gerrit_server=$(grep -E "host" .gitreview | cut -d "=" -f2)
        gerrit_server_port=$(grep -E "port" .gitreview | cut -d "=" -f2)
        echo "GERRIT_SERVER=${gerrit_server}" >> "$GITHUB_ENV"
        echo "GERRIT_SERVER_PORT=${gerrit_server_port}" >> "$GITHUB_ENV"

    - name: Set GERRIT_SERVER and GERRIT_PORT when .gitreview is undefined
      if: ${{ hashFiles('.gitreview') == '' }}
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x

        if [[ ${{ inputs.GERRIT_SERVER }} != '' ]]; then
            echo "GERRIT_SERVER=${{ inputs.GERRIT_SERVER }}" >> "$GITHUB_ENV"
        fi

        if [[ ${{ inputs.GERRIT_SERVER_PORT }} != '' ]]; then
            echo "GERRIT_SERVER_PORT=${{ inputs.GERRIT_SERVER_PORT }}" >> "$GITHUB_ENV"
        fi

    - name: Set env GITHUB branch in env
      shell: bash
      run: |
        gerrit_branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
        echo "GERRIT_BRANCH=${gerrit_branch}" >> "$GITHUB_ENV"

    - name: Print last X commits in the git log
      if: env.ACT == 'true'
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x
        git --no-pager log --graph --all --decorate --pretty=oneline -n5

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@d4fffb50872869abe2d9a9098a6d9c5aa7d16be4 # v2.7.0
      with:
        key: ${{ inputs.GERRIT_SSH_PRIVKEY_G2G }}
        name: "id_rsa"
        known_hosts: ${{ inputs.GERRIT_KNOWN_HOSTS }}
        config: |
          Host ${{ env.GERRIT_SERVER }}
            User ${{ inputs.GERRIT_SSH_USER_G2G }}
            Port 29418
            PubkeyAcceptedKeyTypes +ssh-rsa
            IdentityFile ~/.ssh/id_rsa

    - name: Setup Gerrit remote
      if: env.PROJECT_REPO_GERRIT != ''
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x

        # Setup global git config required by git-review
        git config --global gitreview.username ${{ inputs.GERRIT_SSH_USER_G2G }}
        git config --global user.name ${{ inputs.GERRIT_SSH_USER_G2G }}
        git config --global user.email ${{ inputs.GERRIT_SSH_USER_G2G_EMAIL }}

        # Workaround for git-review failing to copy the commit-msg hook to submodules
        git config core.hooksPath "$(git rev-parse --show-toplevel)/.git/hooks"
        # Init gerrit repo
        git review -s -v
        # print remote settings
        git remote -v

    - name: Extract the pull-request number
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x
        export PR_NUMBER="${{ github.event.pull_request.number || github.event.issue.number }}"
        echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_ENV"

    - name: Get the number of commits in the pull-request
      if: ${{ github.event_name == 'pull_request_target' }}
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x
        num_commits="$(gh pr view ${{ env.PR_NUMBER }} --json commits | jq '.[] | length')"
        echo "PR_COMMITS=$num_commits" >> "$GITHUB_ENV"
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Squash commits into a single commit
      shell: bash
      if: ${{ (env.PR_COMMITS > 0) }}
      # yamllint disable rule:line-length
      run: |
        set -x

        git --no-pager log --graph --all --decorate --pretty=oneline -n"${{ env.PR_COMMITS }}"

        # Create a Change-id from all the PR
        # Squash all commits in pull-request into a single commit
        git reset --soft "${{ github.sha }}"

        # Check if change-id is present in each commit and use the first one
        # Capture and check for signed-of-by and Change-Id
        git log -v --format=%B --reverse "HEAD..HEAD@{1}" | grep -E "^(Change-Id)" > change-Id.txt || true
        git log -v --format=%B --reverse "HEAD..HEAD@{1}" | grep -E "^(Signed-off-by)" > signed-off-by.txt || true
        git log -v --format=%B --reverse "HEAD..HEAD@{1}" | grep -Ev "^(Signed-off-by|Change-Id)" > commit-msg.txt

        if [[ -f commit-msg.txt ]]; then
          commit_message="${commit_message:-commit-msg.txt}"
        fi

        if [[ -f change-Id.txt ]]; then
          commit_message+=' '
          commit_message+="change-Id.txt"
        fi

        if [[ -f signed-off-by.txt ]]; then
          sort -u signed-off-by.txt -o signed-off-by-final.txt
          commit_message+=' '
          commit_message+="signed-off-by-final.txt"
        fi

        git commit -s -v --no-edit -m "$(cat $commit_message)"
        git log -n2

    - name: Submit the change to Gerrit repository
      id: submit
      if: env.PR_NUMBER != ''
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x

        reviewers_emails_list="${{ inputs.REVIEWERS_EMAIL }}"
        # If the reviewers email is unset/empty then use a default
        reviewers=${reviewers_emails_list:-"${{ inputs.GERRIT_SSH_USER_G2G_EMAIL }}"}

        echo "git review .... inprogress"
        git review --yes -t "GH-PR-${{ env.PR_NUMBER }}" --reviewers "$reviewers"

        # retrive change-id from the submitted PR
        gerrit_change_id=$(git show HEAD --format=%B -s | grep Change-Id: | cut -d " " -f2;)

        if [[ "$gerrit_change_id" != '' ]]; then
            echo "GERRIT_CHANGE_ID=${gerrit_change_id}" >> "$GITHUB_ENV"
        fi

    - name: Retrive the Gerrit change number from Change-ID
      if: env.GERRIT_CHANGE_ID != ''
      id: change_num
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x

        # Query for a pre-existing gerrit review to retrive Change-Id
        ssh -v -p 29418 "${{ inputs.GERRIT_SSH_USER_G2G }}@${{ env.GERRIT_SERVER }}" \
                gerrit query limit:1 owner:self is:open \
                project:"${{ env.PROJECT_REPO_GERRIT }}" \
                --current-patch-set --format=JSON \
                "${{ env.GERRIT_CHANGE_ID }}" > query_result.txt

        query_result_url=$(jq -r '.url | select( . != null )' query_result.txt)
        query_result_number=$(jq -r '.number | select( . != null )' query_result.txt)

        echo "GERRIT_CHANGE_REQUEST_URL=${query_result_url}" >> "$GITHUB_ENV"
        echo "GERRIT_CHANGE_REQUEST_NUMBER=${query_result_number}" >> "$GITHUB_ENV"
        echo "GERRIT_CHANGE_REQUEST_URL=${query_result_url}" >> "$GITHUB_OUTPUT"
        echo "GERRIT_CHANGE_REQUEST_NUMBER=${query_result_number}" >> "$GITHUB_OUTPUT"

    - name: PR Comment update CR number
      if: env.GERRIT_CHANGE_REQUEST_URL != ''
      uses: actions/github-script@v7
      with:
        result-encoding: string
        retries: 3
        retry-exempt-status-codes: 400,401
        script: |
          const output = `Thank you for contributing a pull request! 🙏 \n
            The pull-request PR-${{ env.PR_NUMBER }} is submitted to Gerrit [${{ inputs.ORGANIZATION }}](https://${{ env.GERRIT_SERVER }})! \n
            To follow up on the change visit: [${{ env.GERRIT_CHANGE_REQUEST_NUMBER }}](${{ env.GERRIT_CHANGE_REQUEST_URL }}) \n \n
            NOTE: The pull-request PR-${{ env.PR_NUMBER }} will be closed, re-opening the pull-request will not update the same commit and may result in duplicate changes on Gerrit.`
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Close pull-request
      if: ${{ github.event_name == 'pull_request_target' }}
      shell: bash
      # yamllint disable rule:line-length
      run: |
        set -x
        gh pr close --comment "Auto-closing pull request" --delete-branch "${{ env.PR_NUMBER }}"
      env:
        GH_TOKEN: ${{ github.token }}
